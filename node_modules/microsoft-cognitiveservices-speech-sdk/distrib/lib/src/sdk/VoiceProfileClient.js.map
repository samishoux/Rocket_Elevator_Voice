{"version":3,"sources":["src/sdk/VoiceProfileClient.ts"],"names":[],"mappings":"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","file":"VoiceProfileClient.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    FileAudioSource,\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { IAudioSource, PromiseResult } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     *        specifies the keyword to be recognized.\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @param cb - Callback invoked once Voice Profile has been created.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public createProfileAsync(profileType: VoiceProfileType, lang: string, cb?: (e: VoiceProfile) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.createProfile(profileType, lang).on((result: IRestResponse) => {\r\n            if (!!cb) {\r\n                const response: { profileId: string } = result.json();\r\n                const profile = new VoiceProfile(response.profileId, profileType);\r\n                cb(profile);\r\n            }\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @param cb - Callback invoked once Enrollment request has been submitted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.privAdapter.createEnrollment(profile, configImpl).on((result: IRestResponse) => {\r\n            if (!!cb) {\r\n                cb(\r\n                    new VoiceProfileEnrollmentResult(\r\n                        result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n                        result.data,\r\n                        result.statusText,\r\n                    )\r\n                );\r\n            }\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @param cb - Callback invoked once Voice Profile has been deleted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public deleteProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.deleteProfile(profile).on((result: IRestResponse) => {\r\n            this.handleResultCallbacks(result, ResultReason.DeletedVoiceProfile, cb);\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @param cb - Callback invoked once Voice Profile has been reset.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public resetProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.resetProfile(profile).on((result: IRestResponse) => {\r\n            this.handleResultCallbacks(result, ResultReason.ResetVoiceProfile, cb);\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private handleResultCallbacks(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): void {\r\n        if (!!cb) {\r\n            const response: VoiceProfileResult =\r\n                new VoiceProfileResult(\r\n                    result.ok ? successReason : ResultReason.Canceled,\r\n                    result.statusText\r\n                );\r\n            cb(response);\r\n        }\r\n    }\r\n}\r\n"]}