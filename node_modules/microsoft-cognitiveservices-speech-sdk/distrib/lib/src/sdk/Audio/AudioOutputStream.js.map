{"version":3,"sources":["src/sdk/Audio/AudioOutputStream.ts"],"names":[],"mappings":"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","file":"AudioOutputStream.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport {Contracts} from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return PromiseHelper.fromResult(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        const deffer: Deferred<number> = new Deferred<number>();\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        const readUntilFilled: () => void = (): void => {\r\n            if (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n                this.privStream.read()\r\n                    .onSuccessContinueWith((chunk: IStreamChunk<ArrayBuffer>) => {\r\n                        if (chunk !== undefined && !chunk.isEnd) {\r\n                            let tmpBuffer: ArrayBuffer;\r\n                            if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                                tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                                this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                            } else {\r\n                                tmpBuffer = chunk.buffer;\r\n                            }\r\n                            intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                            totalBytes += tmpBuffer.byteLength;\r\n                            readUntilFilled();\r\n                        } else {\r\n                            this.privStream.readEnded();\r\n                            deffer.resolve(totalBytes);\r\n                        }\r\n                    });\r\n            } else {\r\n                deffer.resolve(totalBytes);\r\n            }\r\n        };\r\n        readUntilFilled();\r\n        return deffer.promise();\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public set format(format: AudioStreamFormat) {}\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]}