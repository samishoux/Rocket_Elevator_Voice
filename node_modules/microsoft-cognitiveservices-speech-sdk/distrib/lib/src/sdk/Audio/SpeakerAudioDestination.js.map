{"version":3,"sources":["src/sdk/Audio/SpeakerAudioDestination.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,uDAAmE;AACnE,gDAI8B;AAE9B,yDAA4E;AAC5E,yDAAgE;AAEhE,IAAM,+BAA+B,GAAG,EAAE,GAAG,EAAE,CAAC;AAEhD,IAAM,qBAAqB;IACvB,GAAC,kCAAc,CAAC,GAAG,IAAG,WAAW;IACjC,GAAC,kCAAc,CAAC,GAAG,IAAG,YAAY;IAClC,GAAC,kCAAc,CAAC,IAAI,IAAG,WAAW;OACrC,CAAC;AAEF;;;;;;GAMG;AACH;IAeI,iCAAmB,kBAA2B;QATtC,wBAAmB,GAAY,KAAK,CAAC;QAErC,0BAAqB,GAAY,KAAK,CAAC;QACvC,0BAAqB,GAAY,KAAK,CAAC;QAIvC,sBAAiB,GAAW,CAAC,CAAC;QAGlC,IAAI,CAAC,MAAM,GAAG,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,0BAAgB,EAAE,CAAC;QAC3E,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9B,CAAC;IAEM,oCAAE,GAAT;QACI,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,uCAAK,GAAZ,UAAa,MAAmB;QAC5B,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,EAAE;YACpC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAClC,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;aAAM,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS,EAAE;YACjD,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,CAAC,iBAAiB,IAAI,MAAM,CAAC,UAAU,CAAC;SAC/C;IACL,CAAC;IAEM,uCAAK,GAAZ;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,IAAI,CAAC,gBAAgB,KAAK,SAAS,EAAE;YACrC,IAAI,CAAC,2BAA2B,EAAE,CAAC;SACtC;aAAM,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS,EAAE;YACjD,IAAI,aAAa,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC5D,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC/C,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;gBAC3B,aAAa,GAAG,8BAAoB,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;aAClF;YACD,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,EAAE,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;YACxG,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAC3D,IAAI,CAAC,cAAc,EAAE,CAAC;SACzB;IACL,CAAC;IAED,sBAAI,2CAAM;aAAV,UAAW,MAAyB;YAApC,iBAuCC;YAtCG,IAAI,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,IAAI,OAAO,CAAE,MAAc,CAAC,kBAAkB,CAAC,KAAK,WAAW,EAAE;gBACtG,IAAI,CAAC,UAAU,GAAG,MAA+B,CAAC;gBAClD,IAAM,UAAQ,GAAW,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBAC1E,IAAI,UAAQ,KAAK,SAAS,EAAE;oBACxB,sCAAsC;oBACtC,OAAO,CAAC,IAAI,CACR,iCAA+B,kCAAc,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAG,CAAC,CAAC;iBAEpF;qBAAM,IAAI,OAAM,CAAC,WAAW,CAAC,KAAK,WAAW,IAAI,WAAW,CAAC,eAAe,CAAC,UAAQ,CAAC,EAAE;oBACrF,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;oBAC7B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;oBAC1B,IAAI,CAAC,eAAe,GAAG,IAAI,WAAW,EAAE,CAAC;oBACzC,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBAC/D,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;oBACtB,IAAI,CAAC,eAAe,CAAC,YAAY,GAAG,UAAC,KAAY;wBAC7C,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;wBAClC,KAAI,CAAC,eAAe,CAAC,QAAQ,GAAG,+BAA+B,CAAC;wBAChE,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,eAAe,CAAC,eAAe,CAAC,UAAQ,CAAC,CAAC;wBACvE,KAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,UAAC,CAAQ;4BACtC,KAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC9B,CAAC,CAAC;wBACF,KAAI,CAAC,gBAAgB,CAAC,WAAW,GAAG,UAAC,CAAQ;4BACzC,KAAI,CAAC,2BAA2B,EAAE,CAAC;wBACvC,CAAC,CAAC;wBACF,KAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG,UAAC,CAAQ;4BAC3C,KAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;wBACvC,CAAC,CAAC;oBACN,CAAC,CAAC;oBACF,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC7B;qBAAM;oBACH,sCAAsC;oBACtC,OAAO,CAAC,IAAI,CACR,YAAU,kCAAc,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,oEAAiE,CAAC,CAAC;oBAC1H,IAAI,CAAC,qBAAqB,GAAG,IAAI,6CAAyB,EAAE,CAAC;oBAC7D,IAAI,CAAC,qBAAqB,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;oBACpD,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;iBAChC;aACJ;QACL,CAAC;;;OAAA;IAED,sBAAW,6CAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;;;OAAA;IAED,sBAAW,gDAAW;aAAtB;YACI,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;gBAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;aACrC;YACD,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;;;OAAA;IAEM,uCAAK,GAAZ;QACI,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;YACpD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC5B;IACL,CAAC;IAEM,wCAAM,GAAb;QACI,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;YACnD,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;SAC7B;IACL,CAAC;IAID,sBAAW,kDAAa;aAAxB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAEO,oDAAkB,GAA1B;QACI,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE;YACzG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;YAClC,IAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;YAC5C,IAAI;gBACA,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aAC9C;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACrC,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CACP,iEAAiE,CAAC,CAAC;gBACvE,OAAO;aACV;YACD,IAAI,CAAC,cAAc,EAAE,CAAC;SACzB;aAAM,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YAC5B,IAAI,CAAC,2BAA2B,EAAE,CAAC;SACtC;IACL,CAAC;IAEO,6DAA2B,GAAnC;QACI,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE;YACrD,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;YACnC,IAAI,CAAC,cAAc,EAAE,CAAC;SACzB;IACL,CAAC;IAEO,gDAAc,GAAtB;QAAA,iBAYC;QAXG,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;YAC3D,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG;gBACrB,IAAI,CAAC,CAAC,KAAI,CAAC,UAAU,EAAE;oBACnB,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,CAAC;iBACzB;YACL,CAAC,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACpB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;aACzB;YACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACnC;IACL,CAAC;IAEO,8CAAY,GAApB;QACI,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC;eAC5F,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC;IACpH,CAAC;IAEO,uDAAqB,GAA7B;QACI,OAAO,CAAC,IAAI,CAAC,gBAAgB,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACpF,CAAC;IACL,8BAAC;AAAD,CA3KA,AA2KC,IAAA;AA3KY,0DAAuB","file":"SpeakerAudioDestination.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports\";\r\nimport { AudioFormatTag, AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.Opus]: \"audio/ogg\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.12.1\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer();\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd();\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n            this.privAudioOutputStream.read(receivedAudio);\r\n            if (this.privFormat.hasHeader) {\r\n                receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\r\n            }\r\n            const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n            this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n            this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    set format(format: AudioStreamFormat) {\r\n        if (typeof (AudioContext) !== \"undefined\" || typeof ((window as any).webkitAudioContext) !== \"undefined\") {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}.`);\r\n\r\n            } else if (typeof(MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (event: Event): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (_: Event) => {\r\n                        this.updateSourceBuffer();\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (_: Event) => {\r\n                        this.handleSourceBufferUpdateEnd();\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (_: Event) => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer();\r\n            } else {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play();\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private updateSourceBuffer(): void {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // tslint:disable-next-line:no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private handleSourceBufferUpdateEnd(): void {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private notifyPlayback(): void {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                this.privAudio.play();\r\n            }\r\n            this.privPlaybackStarted = true;\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n"]}