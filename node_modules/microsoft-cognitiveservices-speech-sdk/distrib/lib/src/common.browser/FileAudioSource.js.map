{"version":3,"sources":["src/common.browser/FileAudioSource.ts"],"names":[],"mappings":"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","file":"FileAudioSource.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privFile: File;\r\n\r\n    public constructor(file: File, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privFile = file;\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return PromiseHelper.fromResult(this.privFile);\r\n    }\r\n\r\n    public turnOn = (): Promise<boolean> => {\r\n        if (typeof FileReader === \"undefined\") {\r\n            const errorMsg = \"Browser does not support FileReader.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // initialization error - no streamid at this point\r\n            return PromiseHelper.fromError<boolean>(errorMsg);\r\n        } else if (this.privFile.name.lastIndexOf(\".wav\") !== this.privFile.name.length - 4) {\r\n            const errorMsg = this.privFile.name + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return PromiseHelper.fromError<boolean>(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.upload(audioNodeId).onSuccessContinueWith<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: () => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return stream.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.onSuccessContinueWithPromise<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl) => {\r\n            return PromiseHelper.fromResult({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            });\r\n        });\r\n    }\r\n\r\n    private readHeader = (): Promise<AudioStreamFormatImpl> => {\r\n        // Read the wave header.\r\n        const header: Blob = this.privFile.slice(0, 44);\r\n        const headerReader: FileReader = new FileReader();\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (event: Event): void => {\r\n            const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n\r\n            const view: DataView = new DataView(header);\r\n\r\n            // RIFF 4 bytes.\r\n            const riff: string = String.fromCharCode(view.getUint8(0), view.getUint8(1), view.getUint8(2), view.getUint8(3));\r\n            if (\"RIFF\" !== riff) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            const type: string = String.fromCharCode(\r\n                view.getUint8(8),\r\n                view.getUint8(9),\r\n                view.getUint8(10),\r\n                view.getUint8(11),\r\n                view.getUint8(12),\r\n                view.getUint8(13),\r\n                view.getUint8(14));\r\n            if (\"WAVEfmt\" !== type) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n            }\r\n\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n\r\n        };\r\n\r\n        headerReader.onload = processHeader;\r\n        headerReader.readAsArrayBuffer(header);\r\n        return headerResult.promise();\r\n    }\r\n\r\n    private upload = (audioNodeId: string): Promise<Stream<ArrayBuffer>> => {\r\n        return this.turnOn()\r\n            .onSuccessContinueWithPromise<Stream<ArrayBuffer>>((_: boolean) => {\r\n                return this.privAudioFormatPromise.onSuccessContinueWith<Stream<ArrayBuffer>>((format: AudioStreamFormatImpl) => {\r\n                    const fileStream: ChunkedArrayBufferStream = new ChunkedArrayBufferStream(3200);\r\n\r\n                    const reader: FileReader = new FileReader();\r\n\r\n                    const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n                    this.privStreams[audioNodeId] = stream;\r\n\r\n                    const processFile = (event: Event): void => {\r\n                        if (stream.isClosed) {\r\n                            return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                        }\r\n\r\n                        stream.writeStreamChunk({\r\n                            buffer: reader.result as ArrayBuffer,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                        stream.close();\r\n                    };\r\n\r\n                    reader.onload = processFile;\r\n\r\n                    reader.onerror = (event: ProgressEvent) => {\r\n                        const errorMsg = `Error occurred while processing '${this.privFile.name}'. ${event}`;\r\n                        this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n                        throw new Error(errorMsg);\r\n                    };\r\n\r\n                    const chunk = this.privFile.slice(44);\r\n                    reader.readAsArrayBuffer(chunk);\r\n\r\n                    return stream;\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]}