{"version":3,"sources":["src/sdk/Recognizer.ts"],"names":[],"mappings":"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","file":"Recognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                this.privReco.audioSource.turnOff();\r\n                this.privReco.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    /* tslint:disable:member-ordering */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.fromResult(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.fromResult(authorizationToken);\r\n                });\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected recognizeOnceAsyncImpl(recognitionMode: RecognitionMode, cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n            this.implRecognizerStop().on((_: boolean): void => {\r\n                try {\r\n                    this.privReco.recognize(recognitionMode, (e: SpeechRecognitionResult) => {\r\n                        this.implRecognizerStop().on((_: boolean): void => {\r\n                            if (!!cb) {\r\n                                cb(e);\r\n                            }\r\n                        }, (error: string): void => {\r\n                            if (!!err) {\r\n                                err(error);\r\n                            }\r\n                        });\r\n\r\n                    }, (e: string) => {\r\n                        this.implRecognizerStop(); // We're already in an error path so best effort here.\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    /* tslint:disable:no-empty */\r\n                    }).on((_: boolean): void => { },\r\n                        (error: string) => {\r\n                            if (!!err) {\r\n                                err(error);\r\n                            }\r\n                        });\r\n                } catch (error) {\r\n                    if (!!err) {\r\n                        if (error instanceof Error) {\r\n                            const typedError: Error = error as Error;\r\n                            err(typedError.name + \": \" + typedError.message);\r\n                        } else {\r\n                            err(error);\r\n                        }\r\n                    }\r\n\r\n                    // Destroy the recognizer.\r\n                    this.dispose(true);\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    public startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n            this.implRecognizerStop().on((_: boolean): void => {\r\n                this.privReco.recognize(recognitionMode, undefined, undefined).on((_: boolean): void => {\r\n                    // report result to promise.\r\n                    if (!!cb) {\r\n                        try {\r\n                            cb();\r\n                        } catch (e) {\r\n                            if (!!err) {\r\n                                err(e);\r\n                            }\r\n                        }\r\n                        cb = undefined;\r\n                    }\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                    // Destroy the recognizer.\r\n                    this.dispose(true);\r\n                });\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n                // Destroy the recognizer.\r\n                this.dispose(true);\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    protected stopContinuousRecognitionAsyncImpl(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n            this.implRecognizerStop().on((_: boolean) => {\r\n                if (!!cb) {\r\n                    try {\r\n                        cb();\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    protected implRecognizerStop(): Promise<boolean> {\r\n        if (this.privReco) {\r\n            return this.privReco.stopRecognizing();\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n}\r\n"]}