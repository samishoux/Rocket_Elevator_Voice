{"version":3,"sources":["src/sdk/Transcription/ConversationTranslator.ts"],"names":[],"mappings":"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","file":"ConversationTranslator.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\r\nimport { IDisposable, IErrorMessages } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    Participant,\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\nimport { IConversationTranslator } from \"./IConversationTranslator\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n/***\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator implements IConversationTranslator, IDisposable {\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privAudioConfig: AudioConfig;\r\n    private privSpeechTranslationConfig: SpeechTranslationConfig;\r\n    private privTranslationRecognizerConnection: Connection;\r\n    private privIsDisposed: boolean = false;\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n    private privIsSpeaking: boolean = false;\r\n    private privConversation: ConversationImpl;\r\n    private privSpeechState: SpeechState = SpeechState.Inactive;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n    private privPlaceholderRegion: string = \"westus\";\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    public canceled: (sender: IConversationTranslator, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: IConversationTranslator, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: IConversationTranslator, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: any, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") { lang = ConversationConnectionConfig.defaultLanguageCode; }\r\n\r\n                // create a placecholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const endpoint: string = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\r\n                if (endpoint) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\r\n                }\r\n                const speechEndpointHost: string = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\r\n                if (speechEndpointHost) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string) => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            (() => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any) => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n\r\n            // stop the speech websocket\r\n            this.cancelSpeech();\r\n\r\n            // stop the websocket\r\n            this.privConversation.endConversationAsync(\r\n                (() => {\r\n                    // https delete request\r\n                    this.privConversation.deleteConversationAsync(\r\n                        (() => {\r\n                            this.handleCallback(cb, err);\r\n                            this.dispose();\r\n                        }),\r\n                        ((error: any) => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation?.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n            if (!this.canSpeak) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n\r\n            if (this.privTranslationRecognizer === undefined) {\r\n                this.connectTranslatorRecognizer(\r\n                    (() => {\r\n                        this.startContinuousRecognition(\r\n                            (() => {\r\n                                this.privIsSpeaking = true;\r\n                                this.handleCallback(cb, err);\r\n                            }),\r\n                            ((error: any) => {\r\n\r\n                                this.privIsSpeaking = false;\r\n                                // this.fireCancelEvent(error);\r\n                                this.cancelSpeech();\r\n                                this.handleError(error, err);\r\n                            }));\r\n                    }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            } else {\r\n                this.startContinuousRecognition(\r\n                    (() => {\r\n                        this.privIsSpeaking = true;\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any) => {\r\n                        this.privIsSpeaking = false;\r\n                        // this.fireCancelEvent(error);\r\n                        this.cancelSpeech();\r\n\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n\r\n            this.cancelSpeech();\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            if (!this.privIsSpeaking) {\r\n                // stop speech\r\n                this.cancelSpeech();\r\n                this.handleCallback(cb, err);\r\n                return;\r\n            }\r\n\r\n            // stop the recognition but leave the websocket open\r\n            this.privIsSpeaking = false;\r\n            this.privTranslationRecognizer?.stopContinuousRecognitionAsync(() => {\r\n                this.handleCallback(cb, err);\r\n            }, (error: any) => {\r\n                this.handleError(error, err);\r\n                this.cancelSpeech();\r\n            });\r\n\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n            this.cancelSpeech();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (this.isDisposed && !this.privIsSpeaking) {\r\n            return;\r\n        }\r\n        this.cancelSpeech();\r\n        this.privIsDisposed = true;\r\n        this.privSpeechTranslationConfig?.close();\r\n        this.privSpeechRecognitionLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privAudioConfig = undefined;\r\n        this.privSpeechTranslationConfig = undefined;\r\n        this.privConversation?.dispose();\r\n        this.privConversation = undefined;\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    private connectTranslatorRecognizer(cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            // TODO\r\n            const token: string = encodeURIComponent(this.privConversation.room.token);\r\n\r\n            let endpointHost: string = this.privSpeechTranslationConfig.getProperty(\r\n                PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\r\n            endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\r\n\r\n            const url: string = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\r\n\r\n            this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\r\n\r\n            this.privTranslationRecognizer = new TranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig);\r\n            this.privTranslationRecognizerConnection = Connection.fromRecognizer(this.privTranslationRecognizer);\r\n            this.privTranslationRecognizerConnection.connected = this.onSpeechConnected;\r\n            this.privTranslationRecognizerConnection.disconnected = this.onSpeechDisconnected;\r\n            this.privTranslationRecognizer.recognized = this.onSpeechRecognized;\r\n            this.privTranslationRecognizer.recognizing = this.onSpeechRecognizing;\r\n            this.privTranslationRecognizer.canceled = this.onSpeechCanceled;\r\n            this.privTranslationRecognizer.sessionStarted = this.onSpeechSessionStarted;\r\n            this.privTranslationRecognizer.sessionStopped = this.onSpeechSessionStopped;\r\n\r\n            this.handleCallback(cb, err);\r\n\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n\r\n            this.cancelSpeech();\r\n            // this.fireCancelEvent(error); ?\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    private startContinuousRecognition(cb?: Callback, err?: Callback): void {\r\n        this.privTranslationRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /** Recognizer callbacks */\r\n    private onSpeechConnected = (e: ConnectionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    private onSpeechDisconnected = (e: ConnectionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        this.cancelSpeech();\r\n    }\r\n\r\n    private onSpeechRecognized = (r: TranslationRecognizer, e: TranslationRecognitionEventArgs) => {\r\n        // TODO: add support for getting recognitions from here if own speech\r\n\r\n        // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n        if (e.result?.errorDetails) {\r\n            this.cancelSpeech();\r\n            // TODO: format the error message contained in 'errorDetails'\r\n            this.fireCancelEvent(e.result.errorDetails);\r\n        }\r\n    }\r\n\r\n    private onSpeechRecognizing = (r: TranslationRecognizer, e: TranslationRecognitionEventArgs) => {\r\n        // TODO: add support for getting recognitions from here if own speech\r\n    }\r\n\r\n    private onSpeechCanceled = (r: TranslationRecognizer, e: TranslationRecognitionCanceledEventArgs) => {\r\n        if (this.privSpeechState !== SpeechState.Inactive) {\r\n            try {\r\n                this.cancelSpeech();\r\n            } catch (error) {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onSpeechSessionStarted = (r: Recognizer, e: SessionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Connected;\r\n\r\n    }\r\n\r\n    private onSpeechSessionStopped = (r: Recognizer, e: SessionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: any): void {\r\n        try {\r\n            if (!!this.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    error?.reason ?? CancellationReason.Error,\r\n                    error?.errorDetails ?? error,\r\n                    error?.errorCode ?? CancellationErrorCode.RuntimeError,\r\n                    undefined,\r\n                    error?.sessionId);\r\n\r\n                this.canceled(this, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private cancelSpeech(): void {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            this.privTranslationRecognizer?.stopContinuousRecognitionAsync();\r\n            this.privTranslationRecognizerConnection?.closeConnection();\r\n            this.privTranslationRecognizerConnection = undefined;\r\n            this.privTranslationRecognizer = undefined;\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available\r\n        if (!this.privConversation.isConnected) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privSpeechState === SpeechState.Connected || this.privSpeechState === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}