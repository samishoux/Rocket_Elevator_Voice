{"version":3,"sources":["src/common.speech/SynthesisAdapterBase.ts"],"names":[],"mappings":"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","file":"SynthesisAdapterBase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    protected configConnectionOverride: () => any = undefined;\r\n\r\n    protected fetchConnectionOverride: () => any = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                this.cancelSynthesisLocal(CancellationReason.Error,\r\n                    connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                    connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise) {\r\n            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public connect(): void {\r\n        this.connectImpl().result();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().continueWith((promiseResult: PromiseResult<IConnection>) => {\r\n            try {\r\n                if (promiseResult.isError) {\r\n                    if (!!err) {\r\n                        err(promiseResult.error);\r\n                    }\r\n                } else if (promiseResult.isCompleted) {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public sendNetworkMessage(path: string, payload: string | ArrayBuffer, success?: () => void, err?: (error: string) => void): void {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        this.fetchConnection().on((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload)).on(() => {\r\n                if (!!success) {\r\n                    success();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<boolean> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        return this.fetchConnection().continueWithPromise<boolean>((connection: PromiseResult<IConnection>) => {\r\n            if (connection.isError) {\r\n                this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, connection.error);\r\n                return PromiseHelper.fromError(connection.error);\r\n            }\r\n            return this.sendSynthesisContext(connection.result).continueWithPromise<boolean>((result: PromiseResult<boolean>): Promise<boolean> => {\r\n                if (result.isError) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                    return PromiseHelper.fromError(result.error);\r\n                }\r\n                return this.sendSsmlMessage(connection.result, ssml, requestId).continueWithPromise<boolean>((result: PromiseResult<boolean>): Promise<boolean> => {\r\n                    if (result.isError) {\r\n                        this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                        return PromiseHelper.fromError(result.error);\r\n                    }\r\n\r\n                    const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                        new SpeechSynthesisResult(\r\n                            requestId,\r\n                            ResultReason.SynthesizingAudioStarted,\r\n                        )\r\n                    );\r\n\r\n                    if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                        this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n                    }\r\n\r\n                    const messageRetrievalPromise = this.receiveMessage();\r\n                    return PromiseHelper.fromResult(true);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected receiveMessage = (): Promise<IConnection> => {\r\n        return this.fetchConnection().on((connection: IConnection): Promise<IConnection> => {\r\n            return connection.read()\r\n                .onSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n\r\n                    if (this.receiveMessageOverride !== undefined) {\r\n                        return this.receiveMessageOverride();\r\n                    }\r\n                    if (this.privIsDisposed) {\r\n                        // We're done.\r\n                        return PromiseHelper.fromResult(undefined);\r\n                    }\r\n\r\n                    // indicates we are draining the queue and it came with no message;\r\n                    if (!message) {\r\n                        if (!this.privSynthesisTurn.isSynthesizing) {\r\n                            return PromiseHelper.fromResult(true);\r\n                        } else {\r\n                            return this.receiveMessage();\r\n                        }\r\n                    }\r\n\r\n                    this.privServiceHasSentMessage = true;\r\n\r\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                    if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                        switch (connectionMessage.path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                                break;\r\n                            case \"response\":\r\n                                this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                                break;\r\n                            case \"audio\":\r\n                                if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                                    && !!connectionMessage.binaryBody) {\r\n                                    this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                                    if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                        try {\r\n                                            const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                            const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                                new SpeechSynthesisResult(\r\n                                                    this.privSynthesisTurn.requestId,\r\n                                                    ResultReason.SynthesizingAudio,\r\n                                                    audioWithHeader));\r\n                                            this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    if (this.privSessionAudioDestination !== undefined) {\r\n                                        this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case \"audio.metadata\":\r\n                                const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                                for (const metadata of metadataList) {\r\n                                    if (metadata.Type.toLowerCase() === \"WordBoundary\".toLowerCase()) {\r\n\r\n                                        this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\r\n\r\n                                        const ev: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.text.Text,\r\n                                            metadata.Data.text.Length,\r\n                                            this.privSynthesisTurn.currentTextOffset);\r\n\r\n                                        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, ev);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case \"turn.end\":\r\n                                this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                                let result: SpeechSynthesisResult;\r\n                                try {\r\n                                    result = new SpeechSynthesisResult(\r\n                                        this.privSynthesisTurn.requestId,\r\n                                        ResultReason.SynthesizingAudioCompleted,\r\n                                        this.privSynthesisTurn.allReceivedAudioWithHeader\r\n                                    );\r\n                                    if (!!this.privSuccessCallback) {\r\n                                        this.privSuccessCallback(result);\r\n                                    }\r\n                                } catch (error) {\r\n                                    if (!!this.privErrorCallback) {\r\n                                        this.privErrorCallback(error);\r\n                                    }\r\n                                }\r\n                                if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                                    try {\r\n                                        this.privSpeechSynthesizer.synthesisCompleted(\r\n                                            this.privSpeechSynthesizer,\r\n                                            new SpeechSynthesisEventArgs(result)\r\n                                        );\r\n                                    } catch (e) {\r\n                                        // Not going to let errors in the event handler\r\n                                        // trip things up.\r\n                                    }\r\n                                }\r\n                                break;\r\n\r\n                            default:\r\n\r\n                                if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                                    // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                                    if (!!this.privServiceEvents) {\r\n                                        this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                    }\r\n                                }\r\n\r\n                        }\r\n                    }\r\n\r\n                    return this.receiveMessage();\r\n                });\r\n        }, (error: string) => {\r\n        });\r\n    }\r\n\r\n    protected sendSynthesisContext = (connection: IConnection): Promise<boolean> => {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n\r\n        if (this.connectImplOverride !== undefined) {\r\n            return this.connectImplOverride(isUnAuthorized);\r\n        }\r\n\r\n        if (this.privConnectionPromise) {\r\n            if (this.privConnectionPromise.result().isCompleted &&\r\n                (this.privConnectionPromise.result().isError\r\n                    || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected) &&\r\n                this.privServiceHasSentMessage === true) {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            } else {\r\n                return this.privConnectionPromise;\r\n            }\r\n        }\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    this.privSynthesisTurn.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    this.privSynthesisTurn.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result.result, this.privConnectionId);\r\n\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event: ConnectionEvent) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n                        this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n\r\n                        return PromiseHelper.fromResult<IConnection>(connection);\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.connectImpl(true);\r\n                    } else {\r\n                        this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected sendSpeechServiceConfig = (connection: IConnection, SpeechServiceConfigJson: string): Promise<boolean> => {\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    protected sendSsmlMessage = (connection: IConnection, ssml: string, requestId: string): Promise<boolean> => {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private fetchConnection = (): Promise<IConnection> => {\r\n        if (this.fetchConnectionOverride !== undefined) {\r\n            return this.fetchConnectionOverride();\r\n        }\r\n\r\n        return this.configureConnection();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private configureConnection(): Promise<IConnection> {\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride();\r\n        }\r\n\r\n        if (this.privConnectionConfigurationPromise) {\r\n            if (this.privConnectionConfigurationPromise.result().isCompleted &&\r\n                (this.privConnectionConfigurationPromise.result().isError\r\n                    || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionConfigurationPromise = null;\r\n                return this.configureConnection();\r\n            } else {\r\n                return this.privConnectionConfigurationPromise;\r\n            }\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise((connection: IConnection): Promise<IConnection> => {\r\n            return this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize())\r\n                .onSuccessContinueWith((_: boolean) => {\r\n                    return connection;\r\n                });\r\n        });\r\n\r\n        return this.privConnectionConfigurationPromise;\r\n    }\r\n}\r\n"]}