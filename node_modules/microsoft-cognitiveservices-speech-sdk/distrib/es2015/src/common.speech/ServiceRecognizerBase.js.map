{"version":3,"sources":["src/common.speech/ServiceRecognizerBase.ts"],"names":[],"mappings":"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","file":"ServiceRecognizerBase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudio,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n    private privAudioSource: IAudioSource;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise) {\r\n            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    public recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<boolean> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            return this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n        }\r\n\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = null;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.connectImpl();\r\n\r\n        return this.audioSource\r\n            .attach(this.privRequestSession.audioNodeId)\r\n            .onSuccessContinueWithPromise<boolean>((result: IAudioStreamNode) => {\r\n                let audioNode: ReplayableAudioNode;\r\n\r\n                return this.audioSource.format.onSuccessContinueWithPromise((format: AudioStreamFormatImpl) => {\r\n                    audioNode = new ReplayableAudioNode(result, format.avgBytesPerSec);\r\n                    this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n                    return this.audioSource.deviceInfo.onSuccessContinueWithPromise<boolean>((deviceInfo: ISpeechConfigAudioDevice): Promise<boolean> => {\r\n                        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n                        return this.configureConnection()\r\n                            .continueWithPromise<boolean>((result: PromiseResult<IConnection>): Promise<boolean> => {\r\n                                if (result.isError) {\r\n                                    this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                                    return PromiseHelper.fromError(result.error);\r\n                                }\r\n\r\n                                const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.sessionStarted) {\r\n                                    this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n                                }\r\n\r\n                                const messageRetrievalPromise = this.receiveMessage();\r\n                                const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n                                /* tslint:disable:no-empty */\r\n                                audioSendPromise.on((_: boolean) => { }, (error: string) => {\r\n                                    this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n                                });\r\n                                return PromiseHelper.fromResult(true);\r\n                            });\r\n                    });\r\n                });\r\n            });\r\n    }\r\n\r\n    public stopRecognizing(): Promise<boolean> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            this.audioSource.turnOff();\r\n            return this.sendFinalAudio().onSuccessContinueWithPromise((_: boolean) => {\r\n                this.privRequestSession.onStopRecognizing();\r\n                return this.privRequestSession.turnCompletionPromise.onSuccessContinueWith((_: boolean) => {\r\n                    this.privRequestSession.onStopRecognizing();\r\n                    this.privRequestSession.dispose();\r\n                    return true;\r\n                });\r\n            });\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public connect(): void {\r\n        this.connectImpl().result();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().continueWith((promiseResult: PromiseResult<IConnection>) => {\r\n            try {\r\n                if (promiseResult.isError) {\r\n                    if (!!err) {\r\n                        err(promiseResult.error);\r\n                    }\r\n                } else if (promiseResult.isCompleted) {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => any = undefined;\r\n\r\n    public disconnect(): void {\r\n        if (this.disconnectOverride !== undefined) {\r\n            this.disconnectOverride();\r\n            return;\r\n        }\r\n\r\n        this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.privConnectionPromise.result().isCompleted) {\r\n            if (!this.privConnectionPromise.result().isError) {\r\n                this.privConnectionPromise.result().result.dispose();\r\n                this.privConnectionPromise = null;\r\n            }\r\n        } else {\r\n            this.privConnectionPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    public disconnectAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (this.disconnectOverride !== undefined) {\r\n                this.disconnectOverride();\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n                return;\r\n            }\r\n\r\n            this.cancelRecognitionLocal(CancellationReason.Error,\r\n                CancellationErrorCode.NoError,\r\n                \"Disconnecting\");\r\n\r\n            this.privConnectionPromise.continueWith((result: PromiseResult<IConnection>): void => {\r\n                try {\r\n                    if (result.isError) {\r\n                        if (!!err) {\r\n                            err(result.error);\r\n                        }\r\n                    } else if (result.isCompleted) {\r\n                        result.result.dispose();\r\n\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            });\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public sendMessage(message: string): void { }\r\n\r\n    public sendNetworkMessage(path: string, payload: string | ArrayBuffer, success?: () => void, err?: (error: string) => void): void {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        this.fetchConnection().on((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload)).on(() => {\r\n                if (!!success) {\r\n                    success();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean;\r\n\r\n    protected sendTelemetryData = () => {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return PromiseHelper.fromResult(true);\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        return this.fetchConnection().onSuccessContinueWith((connection: IConnection): Promise<boolean> => {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"telemetry\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                telemetryData));\r\n        });\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected receiveMessage = (): Promise<IConnection> => {\r\n        return this.fetchConnection().on((connection: IConnection): Promise<IConnection> => {\r\n            return connection.read()\r\n                .onSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n\r\n                    if (this.receiveMessageOverride !== undefined) {\r\n                        return this.receiveMessageOverride();\r\n                    }\r\n                    if (this.privIsDisposed) {\r\n                        // We're done.\r\n                        return PromiseHelper.fromResult(undefined);\r\n                    }\r\n\r\n                    // indicates we are draining the queue and it came with no message;\r\n                    if (!message) {\r\n                        if (!this.privRequestSession.isRecognizing) {\r\n                            return PromiseHelper.fromResult(true);\r\n                        } else {\r\n                            return this.receiveMessage();\r\n                        }\r\n                    }\r\n\r\n                    this.privServiceHasSentMessage = true;\r\n\r\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                    if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                        switch (connectionMessage.path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                this.privMustReportEndOfStream = true;\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                                break;\r\n                            case \"speech.startdetected\":\r\n                                const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                                const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechStartDetected) {\r\n                                    this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                                }\r\n\r\n                                break;\r\n                            case \"speech.enddetected\":\r\n\r\n                                let json: string;\r\n\r\n                                if (connectionMessage.textBody.length > 0) {\r\n                                    json = connectionMessage.textBody;\r\n                                } else {\r\n                                    // If the request was empty, the JSON returned is empty.\r\n                                    json = \"{ Offset: 0 }\";\r\n                                }\r\n\r\n                                const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                                // Only shrink the buffers for continuous recognition.\r\n                                // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                                if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                                    this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                                }\r\n\r\n                                const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechEndDetected) {\r\n                                    this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                                }\r\n                                break;\r\n                            case \"turn.end\":\r\n                                this.sendTelemetryData();\r\n\r\n                                if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                                    this.privMustReportEndOfStream = false;\r\n                                    this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                                }\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n\r\n                                    return PromiseHelper.fromResult(true);\r\n                                } else {\r\n                                    this.fetchConnection().onSuccessContinueWith((connection: IConnection) => {\r\n                                        this.sendSpeechContext(connection);\r\n                                        this.sendWaveHeader(connection);\r\n                                    });\r\n                                }\r\n                                break;\r\n\r\n                            default:\r\n\r\n                                if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                                    // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                                    if (!!this.privServiceEvents) {\r\n                                        this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                    }\r\n                                }\r\n\r\n                        }\r\n                    }\r\n\r\n                    return this.receiveMessage();\r\n                });\r\n        }, (error: string) => {\r\n        });\r\n    }\r\n\r\n    protected sendSpeechContext = (connection: IConnection): Promise<boolean> => {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    protected sendWaveHeader(connection: IConnection): Promise<boolean> {\r\n        return this.audioSource.format.onSuccessContinueWithPromise((format: AudioStreamFormatImpl) => {\r\n            // this.writeBufferToConsole(format.header);\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Binary,\r\n                \"audio\",\r\n                this.privRequestSession.requestId,\r\n                \"audio/x-wav\",\r\n                format.header\r\n            ));\r\n        });\r\n    }\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n\r\n        if (this.connectImplOverride !== undefined) {\r\n            return this.connectImplOverride(isUnAuthorized);\r\n        }\r\n\r\n        if (this.privConnectionPromise) {\r\n            if (this.privConnectionPromise.result().isCompleted &&\r\n                (this.privConnectionPromise.result().isError\r\n                    || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected) &&\r\n                this.privServiceHasSentMessage === true) {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            } else {\r\n                return this.privConnectionPromise;\r\n            }\r\n        }\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    this.privRequestSession.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    this.privRequestSession.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);\r\n\r\n                this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event: ConnectionEvent) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n                        this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n\r\n                        return PromiseHelper.fromResult<IConnection>(connection);\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.connectImpl(true);\r\n                    } else {\r\n                        this.privRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: () => any = undefined;\r\n\r\n    protected fetchConnectionOverride: () => any = undefined;\r\n\r\n    protected sendSpeechServiceConfig = (connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<boolean> => {\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry = JSON.parse(SpeechServiceConfigJson);\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) { // && this.privConnectionId !== this.privSpeechServiceConfigConnectionId) {\r\n            //  this.privSpeechServiceConfigConnectionId = this.privConnectionId;\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    protected sendAudio = (\r\n        audioStreamNode: IAudioStreamNode): Promise<boolean> => {\r\n        return this.audioSource.format.onSuccessContinueWithPromise((audioFormat: AudioStreamFormatImpl) => {\r\n            // NOTE: Home-baked promises crash ios safari during the invocation\r\n            // of the error callback chain (looks like the recursion is way too deep, and\r\n            // it blows up the stack). The following construct is a stop-gap that does not\r\n            // bubble the error up the callback chain and hence circumvents this problem.\r\n            // TODO: rewrite with ES6 promises.\r\n            const deferred = new Deferred<boolean>();\r\n\r\n            // The time we last sent data to the service.\r\n            let nextSendTime: number = Date.now();\r\n\r\n            // Max amount to send before we start to throttle\r\n            const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n            const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n            const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n            const readAndUploadCycle = () => {\r\n\r\n                // If speech is done, stop sending audio.\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    this.fetchConnection().on((connection: IConnection) => {\r\n                        audioStreamNode.read().on(\r\n                            (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                                // we have a new audio chunk to upload.\r\n                                if (this.privRequestSession.isSpeechEnded) {\r\n                                    // If service already recognized audio end then don't send any more audio\r\n                                    deferred.resolve(true);\r\n                                    return;\r\n                                }\r\n\r\n                                let payload: ArrayBuffer;\r\n                                let sendDelay: number;\r\n\r\n                                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                                    payload = null;\r\n                                    sendDelay = 0;\r\n                                } else {\r\n                                    payload = audioStreamChunk.buffer;\r\n                                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                                        sendDelay = 0;\r\n                                    } else {\r\n                                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                                    }\r\n                                }\r\n\r\n                                // Are we ready to send, or need we delay more?\r\n                                this.privSetTimeout(() => {\r\n                                    if (payload !== null) {\r\n                                        nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                                    }\r\n\r\n                                    const uploaded: Promise<boolean> = connection.send(\r\n                                        new SpeechConnectionMessage(\r\n                                            MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload));\r\n\r\n                                    if (!audioStreamChunk?.isEnd) {\r\n                                        uploaded.continueWith((_: PromiseResult<boolean>) => {\r\n                                            // this.writeBufferToConsole(payload);\r\n                                            // Regardless of success or failure, schedule the next upload.\r\n                                            // If the underlying connection was broken, the next cycle will\r\n                                            // get a new connection and re-transmit missing audio automatically.\r\n                                            readAndUploadCycle();\r\n                                        });\r\n                                    } else {\r\n                                        // the audio stream has been closed, no need to schedule next\r\n                                        // read-upload cycle.\r\n                                        this.privRequestSession.onSpeechEnded();\r\n                                        deferred.resolve(true);\r\n                                    }\r\n                                }, sendDelay);\r\n                            },\r\n                            (error: string) => {\r\n                                if (this.privRequestSession.isSpeechEnded) {\r\n                                    // For whatever reason, Reject is used to remove queue subscribers inside\r\n                                    // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\r\n                                    // means that sometimes things can be rejected in normal circumstances, without\r\n                                    // any errors.\r\n                                    deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\r\n                                } else {\r\n                                    // Only reject, if there was a proper error.\r\n                                    deferred.reject(error);\r\n                                }\r\n                            });\r\n                    }, (error: string) => {\r\n                        deferred.reject(error);\r\n                    });\r\n                }\r\n            };\r\n\r\n            readAndUploadCycle();\r\n\r\n            return deferred.promise();\r\n        });\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += buffer.byteLength + \"\\r\\n\";\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n            }\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private sendFinalAudio(): Promise<boolean> {\r\n        const deferred = new Deferred<boolean>();\r\n\r\n        this.fetchConnection().on((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null)).on((_: boolean) => {\r\n                deferred.resolve(true);\r\n            }, (error: string) => {\r\n                deferred.reject(error);\r\n            });\r\n        }, (error: string) => {\r\n            deferred.reject(error);\r\n        });\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    private fetchConnection = (): Promise<IConnection> => {\r\n        if (this.fetchConnectionOverride !== undefined) {\r\n            return this.fetchConnectionOverride();\r\n        }\r\n\r\n        return this.configureConnection();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private configureConnection(): Promise<IConnection> {\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride();\r\n        }\r\n\r\n        if (this.privConnectionConfigurationPromise) {\r\n            if (this.privConnectionConfigurationPromise.result().isCompleted &&\r\n                (this.privConnectionConfigurationPromise.result().isError\r\n                    || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionConfigurationPromise = null;\r\n                return this.configureConnection();\r\n            } else {\r\n                return this.privConnectionConfigurationPromise;\r\n            }\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise((connection: IConnection): Promise<IConnection> => {\r\n            return this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())\r\n                .onSuccessContinueWithPromise((_: boolean) => {\r\n                    return this.sendSpeechContext(connection).onSuccessContinueWithPromise((_: boolean) => {\r\n                        return this.sendWaveHeader(connection).onSuccessContinueWith((_: boolean) => {\r\n                            return connection;\r\n                        });\r\n                    });\r\n                });\r\n        });\r\n\r\n        return this.privConnectionConfigurationPromise;\r\n    }\r\n}\r\n"]}